  <img class="picture logo" src="/images/logo2.png" />
<script type="text/javascript">

  var game = new Phaser.Game(1024, 768, Phaser.AUTO, '', { preload: preload, create: create, update: update, render: render });

  function preload(){

    beginningTimeSeconds = game.time.time / 1000
    beginningTimeMS = game.time.time

// ******************* MAX CHANGES *******************
    // minLogSize = 1000;

    // var levelLogs = [
    //     createLog(minLogSize + 500, 600, 'log1', 1.87, -90),
    //     createLog(minLogSize + 450, 600, 'log1', 1.87, -90)
    // ]

    // sounds for level 3

    game.load.audio('jump', '/sounds/jump2.mp3');
    game.load.audio('flap', '/sounds/wingFlap2.mp3');
    game.load.audio('flap2', '/sounds/wingFlap1.mp3');
    game.load.audio('gulp1', '/sounds/gulp 1.mp3');
    game.load.audio('gulp2', '/sounds/gulp 2.mp3');
    game.load.audio('ribbit1', '/sounds/ribbit1.mp3');
    game.load.audio('ribbit2', '/sounds/ribbit2.mp3');
    game.load.audio('ribbit3', '/sounds/ribbit3.mp3');
    // game.load.audio('splash', '/sounds/surfbort_short.mp3');
    game.load.audio('splash', '/sounds/splash2.mp3');
    game.load.audio('yipee', '/sounds/yipee.mp3');


    //level 3 images

    //invisible platforms
    game.load.image('invisible_line', '/images/blank_line.png');
    game.load.image('purp_line', '/images/purp_line.png');

    //background
    game.load.image('background', '/images/level_3_background.png');
    game.load.image('cloud1', '/images/cloud_1.png');
    game.load.image('cloud4', '/images/cloud_4.png');

    //interactables
    game.load.image('rock1', '/images/rock_1.png');
    game.load.image('rock2', '/images/rock_2.png');
    game.load.image('log1', '/images/log_1.png');
    game.load.image('log2', '/images/log_2.png');
    game.load.image('log3', '/images/log_3.png');
    game.load.image('log4', '/images/log_4.png');
    game.load.image('water', '/images/water copy.png');

    //animals
    game.load.spritesheet('smilingfrog', '/images/frogsprite.png', 216, 218);
    game.load.spritesheet('fly', '/images/Tiny_flies_sheet.png', 19, 18);
    game.load.spritesheet('player_bird', '/images/bird sprite10-1.png', 84, 80);
  }

  var platforms;
  var logs;
  var flyCount;
  var birdie;
  var ledge;
  var log;
  var logs;
  var platforms;
  var water;
  var jump;
  var flap;
  var flap2;
  var flyContainers;
  var createFlyForcefield;
  var ribbit_array;
  // var timer;
  // var timer2;
  var total = 0;
  var total2 = 0;
  var splashed = false;


  function create(){

    jump = game.add.audio('jump');
    flap = game.add.audio('flap');
    flap2 = game.add.audio('flap2');
    gulp1 = game.add.audio('gulp1');
    gulp2 = game.add.audio('gulp2');
    ribbit1 = game.add.audio('ribbit1');
    ribbit2 = game.add.audio('ribbit2');
    ribbit3 = game.add.audio('ribbit3');
    splash = game.add.audio('splash');
    yipee = game.add.audio('yipee');

    flyCount = 0

    game.physics.startSystem(Phaser.Physics.ARCADE);

    background = game.add.image(-100, 0, 'background');
    background.scale.x = game.rnd.realInRange(1.87, 1.87);
    background.scale.y = game.rnd.realInRange(1.87, 1.87);

    // function to creat a cloud
    createCloud = function(x, y, xVelocity, image)
    {
        cloud = game.add.sprite(x, y, image);
        game.physics.arcade.enable(cloud);
        cloud.enableBody = true;
        cloud.body.immovable = true;
        cloud.body.velocity.x = xVelocity;
        cloud.body.bounce.setTo(1, 1);
    }

    // creating moving cloud
    createCloud(335, -50, 5, 'cloud1');

    // create platform group
    platforms = game.add.group();
    platforms.enableBody = true;

    // adding rock images
    game.add.image(105, 560, 'rock1');
    game.add.image(480, 570, 'rock2');

    // create log group
    logs = game.add.group();
    logs.enableBody = true;

    // create invisible fly fence group
    flyContainers = game.add.group();
    flyContainers.enableBody = true;

    // place platforms behind rocks
    createLedge(140, 595, 1, 0);
    createLedge(505, 605, 1.3, 0);

    cursors = game.input.keyboard.createCursorKeys();
    space_key = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    enterKey = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);

    // creating very first log
    createLog(500, 600, 'log1', 1.87, -90);
    createLedge(520, 620, 1.87, -90);

    // calling groups of logs to appear from off screen
    logFloat();

    game.time.events.loop(Phaser.Timer.SECOND * 25, logFloat, this);
    flap.play();
    // create a log
    function createLog(x, y, image, size, xVelocity) {
        log = logs.create(x, y, image);
        log.scale.x = game.rnd.realInRange(size, size);
        log.scale.y = game.rnd.realInRange(size, size);
        log.body.immovable = true;
        log.body.velocity.x = xVelocity;        
    }

    // create invisible platform to attach to log
    function createLedge(x, y, xScale, xVelocity) {
        ledge = platforms.create(x, y, 'invisible_line');
        ledge.scale.x = game.rnd.realInRange(xScale, xScale);
        ledge.body.immovable = true;
        ledge.body.velocity.x = xVelocity;        
    }

    // create group of 4 logs offscreen
    function logFloat() {
        flap.play();
        createLog(1100, 600, 'log1', 1.87, -90);
        createLedge(1120, 620, 1.6, -90);
        createLog(1700, 570, 'log3', 1.87, -92);
        createLedge(1720, 620, 2.75, -92);
        createLog(2300, 585, 'log4', 1.87, -88);
        createLedge(2320, 620, 2, -88);
        createLog(2900, 600, 'log2', 1.87, -91);
        createLedge(2910, 620, 1.6, -91);
    }

    // create function for container for flies
    function createFlyForcefield(y, xScale) {
        flyForcefield = flyContainers.create(0, y, 'invisible_line');
        flyForcefield.scale.x = game.rnd.realInRange(xScale, xScale);
        flyForcefield.body.immovable = true;
    }

    // add container for flies
    createFlyForcefield(200, 50);
    createFlyForcefield(650, 50);

    // add frog
    frog = game.add.sprite(150, 540, 'smilingfrog')
    frog.scale.x = game.rnd.realInRange(.18, .18);
    frog.scale.y = game.rnd.realInRange(.18, .18);
    game.physics.arcade.enable(frog);
    frog.body.bounce.y = 0.1;
    frog.body.gravity.y = 1000;
    frog.checkWorldBounds = true;
    ribbit1.play();

    // add water
    water = game.add.image(-525, 625, 'water');

    // //adding bird of prey
    birdie = game.add.sprite(750, -30, 'player_bird');
    birdie.scale.x = game.rnd.realInRange(1.8, 1.8);
    birdie.scale.y = game.rnd.realInRange(1.8, 1.8);
    game.physics.arcade.enable(birdie);
    birdie.enableBody = true;
    birdie.body.immovable = true;
    birdie.body.collideWorldBounds = true;
    birdie.body.velocity.x = 180;
    birdie.body.bounce.setTo(1, 1);

    // adding bird animations
    birdie.animations.add('left', [0, 1, 2, 1], 6, true);
    birdie.animations.add('right', [9, 10, 11, 10], 6, true);
    birdie.animations.add('down', [18, 19, 20, 19], 6, true);
    birdie.animations.add('left_down', [6, 7, 8, 7], 6, true);
    birdie.animations.add('right_down', [15, 16, 17, 16], 6, true);
    // unused animations (possible deletion allowed)
    birdie.animations.add('up', [21, 22, 23, 22], 6, true);
    birdie.animations.add('left_up', [3, 4, 5, 4], 6, true);
    birdie.animations.add('right_up', [12, 13, 14, 13], 6, true);

    frog.animations.add('open', [0], 0, true);
    frog.animations.add('closed', [1], 0, true);

    
    flies = game.add.group();
    flies.enableBody = true;

    // adding fly function
    createFly = function(x, y, xVelocity, yVelocity)
    {
    fly = flies.create(x, y, 'fly')
    game.physics.arcade.enable(fly);
    fly.body.collideWorldBounds = true;
    fly.scale.x = game.rnd.realInRange(.8, .8);
    fly.scale.y = game.rnd.realInRange(.8, .8);
    fly.minSpeed = -180;
    fly.maxSpeed = 180;
    fly.body.velocity.x = xVelocity;
    fly.body.velocity.y = yVelocity;
    fly.animations.add('right', [0, 1], 15, true);
    fly.animations.add('left', [2, 3], 15, true);
    fly.body.bounce.setTo(1, 1);
    }

    // adding first fly
    createFly(650, 490, 30, 160);


    // fly = game.add.sprite(650, 490, 'fly')
    // fly.enableBody = true;
    // game.physics.arcade.enable(fly);
    // fly.body.collideWorldBounds = true;
    // fly.scale.x = game.rnd.realInRange(.8, .8);
    // fly.scale.y = game.rnd.realInRange(.8, .8);
    // fly.minSpeed = -180;
    // fly.maxSpeed = 180;
    // fly.body.velocity.x = 30;
    // fly.body.velocity.y = 180;
    // fly.animations.add('right', [0, 1], 15, true);
    // fly.animations.add('left', [2, 3], 15, true);
    // fly.body.bounce.setTo(1, 1);

    cursors = game.input.keyboard.createCursorKeys();

    // //  Create our Timer
    // timer = game.time.create(false);
    // timer2 = game.time.create(false);

    // //  Set a TimerEvent to occur after 2 seconds
    // timer.loop(1000, updateCounter, this);
    // timer2.loop(1, updateCounter2, this);

    // //  Start the timer running - this is important!
    // //  It won't start automatically, allowing you to hook it to button events and the like.
    // timer.start();
    // timer2.start();
  }

  function update(){

    game.physics.arcade.collide(frog, platforms);
    game.physics.arcade.collide(fly, flyContainers);

    game.physics.arcade.overlap(frog, fly, winFunc, null, this);
    frog.events.onOutOfBounds.add(killFrog, this);


    function killFrog(){
        frog.kill();
        water.kill();
        water = game.add.image(-525, 625, 'water');
        if (splashed === false)
        {
            splash.play();
            splashed = true
            setTimeout(function(){
                ribbit3.play();
            }, 2000);
            setTimeout(function(){
                splashed = false
            }, 500);
        setTimeout(function(){
        frog = game.add.sprite(150, 540, 'smilingfrog');
        frog.animations.add('open', [0], 0, true);
        frog.animations.add('closed', [1], 0, true);
        if (flyCount < 1)
        {
        frog.scale.x = game.rnd.realInRange(.18, .18);
        frog.scale.y = game.rnd.realInRange(.18, .18); 
        }
        else if (flyCount === 1)
        {
        frog.scale.x = game.rnd.realInRange(.21, .21);
        frog.scale.y = game.rnd.realInRange(.21, .21);
        }
        else if (flyCount ===2)
        {
        frog.scale.x = game.rnd.realInRange(.24, .24);
        frog.scale.y = game.rnd.realInRange(.24, .24);
        }
        else if (flyCount ===3)
        {
        frog.scale.x = game.rnd.realInRange(.27, .27);
        frog.scale.y = game.rnd.realInRange(.27, .27);
        }
        water.kill();
        water = game.add.image(-525, 625, 'water');
        game.physics.arcade.enable(frog);
        frog.body.bounce.y = 0.1;
        frog.body.gravity.y = 1000;
        frog.checkWorldBounds = true;
        }, 2000);
        }
    }

    function winFunc(){
        fly.kill();
        flyCount++;
        console.log(flyCount);

        if (flyCount == 3)
        {
            if (frog.body.touching.down)
            {
                frog.body.velocity.y = -100;
            }
            frog.scale.setTo(.27,.27);
            gulp2.play();
            // timer.stop();
            // timer2.stop();
            finishTime = game.time.time - beginningTimeMS
            sessionStorage.setItem("thirdLevelTime", finishTime);
            setTimeout(function(){
                yipee.play();
            }, 500);
            birdie.body.velocity.x = 0;
            game.physics.arcade.accelerateToObject(birdie, frog, 75, 500, 500);
            flap.play();

            var levelChange = function() {
            window.location.replace("http://reincarnage.herokuapp.com/level4intro")};
            
            // var levelChange = function() {
            // window.location.replace("http://localhost:3000/level4intro")};

            $('body').fadeOut(3800, function(){levelChange();});
        }
        else if (flyCount == 1)
        {
            if (frog.body.touching.down)
            {
                frog.body.velocity.y = -80;
            }
            frog.scale.setTo(.21,.21);
            gulp1.play();
            createFly(0, 490, 30, 0);
            flap2.play();
        }
        else if (flyCount == 2)
        {
            frog.scale.setTo(.24,.24);
            gulp2.play();
            createFly(750, 490, -30, 100);
            flap2.play();
        }

    }

    initiateAnimations = function(fowl)
    {
        if (fowl.body.velocity.x > 0 && fowl.body.velocity.y > 0)
        {
            fowl.animations.play('right_down')
        }
        else if (fowl.body.velocity.x < 0 && fowl.body.velocity.y > 0)
        {
            fowl.animations.play('left_down')
        }
        else if (fowl.body.velocity.x == 180 && fowl.body.velocity.y == -180)
        {
            fowl.animations.play('right_up')
        }
        else if (fowl.body.velocity.x == -180 && fowl.body.velocity.y == -180)
        {
            fowl.animations.play('left_up')
        }
        else if (fowl.body.velocity.x > 0)
        {
            fowl.animations.play('right')
        }
        else if (fowl.body.velocity.x < 0)
        {
            fowl.animations.play('left')
        }
        else if (fowl.body.velocity.y > 0 && (fowl.body.velocity.x < 140 && fowl.body.velocity.x > -140))
        {
            fowl.animations.play('down')
        }
        else if (fowl.body.velocity.y < 0 && (fowl.body.velocity.x < 140 && fowl.body.velocity.x > -140))
        {
            fowl.animations.play('up')
        }
    }

    initiateAnimations(birdie);
    initiateAnimations(fly);



    if (frog.body.touching.down)
    {
    frog.body.velocity.x = 0;
    frog.animations.play('closed');
    }
    else
    {
    frog.animations.play('open');
    }

    if (cursors.left.isDown)
    {
      // hop frog to left
      
      frog.body.velocity.x = -200

      if (frog.body.touching.down)
      {

      frog.body.velocity.y = -50

      }


    }
    else if (cursors.right.isDown)
    {
      // hop frog right
    
      frog.body.velocity.x = 200

      if (frog.body.touching.down)
      {

        frog.body.velocity.y = -50

      }

    }
    // else
    // {
    //   frog.animations.stop();

    //   frog.frame = 4;
    // }

    if (space_key.isDown && frog.body.touching.down)
    {

        // ribbit_array = ["ribbit1", "ribbit2", "ribbit3"]
        // random_ribbit = ribbit_array[Math.floor(ribbit_array.length * Math.random())];
        // ribbit = game.add.audio(random_ribbit);
      frog.body.velocity.y = -450;
      jump.play();
      flap2.play();
      if (cursors.left.isDown)
      {
        frog.body.velocity.x = -200
      }
      else if (cursors.right.isDown)
      {
        frog.body.velocity.x = 200
      }
    }

  }

// function updateCounter() {

//     total++;

// }

// function updateCounter2() {

//     total2++;

// }

  function render(){
        // game.debug.text('Time until event: ' + timer.duration.toFixed(0), 800, 40);
        game.debug.text(((game.time.time / 1000) - beginningTimeSeconds).toFixed(1) + 's', 900, 30);
        var timeDisplay = game.add.text(830, 10, "Time:", { font: "20px Monaco", fill: "RGBA(255, 255, 254, 1)"});
        timeDisplay.setShadow(1.5,1.5, 'rgba(0,0,0,1)', 0);
        game.debug.text(flyCount + ' of 3', 900, 55);
        var timeDisplay = game.add.text(820, 35, "Flies:", { font: "20px Monaco", fill: "RGBA(255, 255, 254, 1)"});
        timeDisplay.setShadow(1.5,1.5, 'rgba(0,0,0,1)', 0);
  }

$(function(){
    $('body').hide();
    $('body').fadeIn(2000);

  })

  </script>